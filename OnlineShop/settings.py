"""
Django settings for OnlineShop project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path

from csp.constants import SELF, NONE
from django.urls import reverse
from django.utils.translation import gettext_lazy as _
import firebase_admin
from django.utils.translation import gettext_lazy as _
from dotenv import load_dotenv
from firebase_admin import credentials, firestore

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/
dotenv_path = BASE_DIR / '.env'

load_dotenv(dotenv_path)
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')
if not SECRET_KEY:
    raise ValueError("SECRET_KEY is not stored in .env file")
CURRENT_DOMAIN = os.getenv('DJANGO_ALLOWED_HOSTS', '')

STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')
STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY')
STRIPE_ENDPOINT_SECRET = os.getenv('STRIPE_ENDPOINT_SECRET')
if CURRENT_DOMAIN == 'oliverweber.com':
    STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY_MIRROR')
    STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY_MIRROR')
    STRIPE_ENDPOINT_SECRET = os.getenv('STRIPE_ENDPOINT_SECRET_MIRROR')
elif CURRENT_DOMAIN == 'oliverweber.online':
    STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')
    STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY')
    STRIPE_ENDPOINT_SECRET = os.getenv('STRIPE_ENDPOINT_SECRET')
else:
    raise ValueError("Unknown domain configuration")

PAYPAL_MODE = os.getenv('PAYPAL_MODE', 'sandbox')  # By default 'sandbox' for testing
PAYPAL_CLIENT_ID = os.getenv('PAYPAL_CLIENT_ID')
PAYPAL_CLIENT_SECRET = os.getenv('PAYPAL_CLIENT_SECRET')

RECAPTCHA_SITE_KEY = os.environ.get('RECAPTCHA_SITE_KEY')
RECAPTCHA_SECRET_KEY = os.environ.get('RECAPTCHA_SECRET_KEY')

GOOGLE_MAPS_API_KEY = os.environ.get('GOOGLE_PLACES_API_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
FIREBASE_CREDENTIALS_FILE = os.getenv('FIREBASE_CREDENTIALS')

# Initialization Firebase (just once)
if not firebase_admin._apps:
    FIREBASE_CREDENTIALS = credentials.Certificate(FIREBASE_CREDENTIALS_FILE)
    firebase_admin.initialize_app(FIREBASE_CREDENTIALS)

# Firestore client (global object)
FIRESTORE_CLIENT = firestore.client()

GEOIP_config = os.path.join(BASE_DIR, "shop", "static", "GEOIP", "GeoLite2-Country.mmdb")

DEBUG = os.environ.get('DJANGO_DEBUG', 'False') == 'True'

USE_HOTJAR = not DEBUG
HOTJAR_ID = os.getenv('HOTJAR_ID')
if CURRENT_DOMAIN == 'oliverweber.com':
    HOTJAR_ID = os.getenv('HOTJAR_ID_MIRROR')
elif CURRENT_DOMAIN == 'oliverweber.online':
    HOTJAR_ID = os.getenv('HOTJAR_ID')
else:
    HOTJAR_ID = os.getenv('HOTJAR_ID')

raw_hosts = os.getenv('ALLOWED_HOSTS', '')       # e.g. "a.com,b.com,127.0.0.1"
ALLOWED_HOSTS = [h.strip() for h in raw_hosts.split(',') if h.strip()]

GEOIP_PATH = os.path.join(BASE_DIR, 'shop/static/GEOIP')
SECURE_SSL_REDIRECT = not DEBUG # false ONLY for localhost. For production we have to use TRUE
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

SECURE_CONTENT_TYPE_NOSNIFF = True

# CONTENT_SECURITY_POLICY = {
#     "EXCLUDE_URL_PREFIXES": [],  # If necessary, specify URL prefixes for which the CSP does not apply.
#     "DIRECTIVES": {
#         "default-src": [SELF],
#         "script-src": [SELF, "https://trusted.cdn.com"],
#         "style-src": [SELF, "https://trusted.cdn.com"],
#         "img-src": [SELF, "data:"],
#         "font-src": [SELF],
#         "connect-src": [SELF],
#         "frame-ancestors": [SELF],
#         "form-action": [SELF],
#         "report-uri": "/gb/csp-report/",
#     },
# }

# Policy in “report only” mode. The browser will not block resources,
# but will only send reports of violations to the specified report-uri.
# CONTENT_SECURITY_POLICY_REPORT_ONLY = {
#     "EXCLUDE_URL_PREFIXES": [],
#     "DIRECTIVES": {
#         "default-src": ["'none'"],
#         "media-src": ["'self'"],
#         "script-src": [
#             "'self'",
#             "blob:",
#             "https://trusted.cdn.com",
#             "https://kit.fontawesome.com",
#             "https://www.googletagmanager.com",
#             "https://sgw.stape.bg",
#             "https://www.gstatic.com",
#             "https://code.jquery.com",
#             "https://js.stripe.com",
#             "https://cdn.jsdelivr.net",
#             "https://static.hj.contentsquare.net",
#             "https://t.contentsquare.net",
#             "https://t.ba.contentsquare.net",
#             "https://www.google.com/recaptcha/"
#
#         ],
#         "style-src": [
#             "'self'",
#             "https://trusted.cdn.com",
#             "https://fonts.googleapis.com",
#             "https://maxcdn.bootstrapcdn.com",
#             "https://kit.fontawesome.com",
#             "https://cdn.jsdelivr.net"
#         ],
#         "img-src": [
#             "'self'",
#             "data:",
#             "https://storage.googleapis.com",
#             "https://c.ba.contentsquare.net"
#         ],
#         "font-src": [
#             "'self'",
#             "https://fonts.gstatic.com",
#             "https://maxcdn.bootstrapcdn.com",
#             "http://maxcdn.bootstrapcdn.com",
#             "https://ka-f.fontawesome.com",
#
#         ],
#         "connect-src": [
#             "'self'",
#             "https://firestore.googleapis.com",
#             "https://maxcdn.bootstrapcdn.com",
#             "https://www.googletagmanager.com",
#             "https://ka-f.fontawesome.com",
#             "https://sgw.stape.bg",
#             "https://c.ba.contentsquare.net",
#             "https://k.ba.contentsquare.net",
#             "https://www.google.com/recaptcha/"
#         ],
#         "frame-ancestors": ["'self'"],
#         "form-action": ["'self'"],
#         "frame-src": [
#             "'self'",
#             "https://js.stripe.com",
#             "https://www.google.com/recaptcha/"
#         ],
#         "upgrade-insecure-requests": True,
#         "report-uri": "/gb/csp-report/",
#     },
# }

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'background_task',
    'widget_tweaks',
    'shop',
    'axes',
    'csp',
    'autotranslate',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'axes.middleware.AxesMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "csp.middleware.CSPMiddleware",

    'shop.middleware.ensure_anon_session_middleware.EnsureAnonymousSessionMiddleware',
    'shop.middleware.redirect_en_to_gb_middleware.RedirectENtoGBMiddleware',

]

AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesStandaloneBackend',
    'django.contrib.auth.backends.ModelBackend',
]

AXES_FAILURE_LIMIT = 10                 # Number of unsuccessful login attempts before blocking
AXES_COOLOFF_TIME = timedelta(minutes=10)                   # Lock time in hours (can be set in minutes, e.g. '1' means 1 hour)
AXES_LOCKOUT_URL = 'lockout/'  # Template used to display lockout page

ROOT_URLCONF = 'OnlineShop.urls'
CSRF_COOKIE_HTTPONLY = False
CSRF_COOKIE_SECURE = True     # Only if https is used
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'shop/templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'shop.context_processor.user_role',
                'shop.context_processor.user_is_special',
                'shop.context_processor.customer_type',
                'shop.context_processor.shop_page_url',
                'shop.context_processor.b2b_can_pay',
                'shop.context_processor.hotjar',
                'shop.context_processor.vocabulary_translation',
                'shop.context_processor.hotjar_id',

            ],
        },
    },
]

WSGI_APPLICATION = 'OnlineShop.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'gb'

TIME_ZONE = 'UTC'
LOGIN_URL = 'login'
USE_I18N = True
USE_L10N = True
LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale')]
LANGUAGES = [
    ('gb', _('English')),
    ('de', _('German')),
    ('it', _('Italian')),
    ('fr', _('French')),
    ('es', _('Spanish')),
    ('ru', _('Russian')),
]

USE_TZ = True

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATIC_URL = 'static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'shop/static'),
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'shop/media'
                          )
# URL, where the files will be accessed

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOG_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # Save Django's default loggers
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname}: {message}',
            'style': '{',
        },
    },
    'filters': {
        'ignore_static': {
            '()': 'shop.logging_filters.IgnoreStaticFilesFilter',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',  # INFO or WARN can be selected for production
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'django.log'),
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'filters': ['ignore_static'],
            'formatter': 'verbose',
            'delay': True,
        },
        'console': {
            'level': 'DEBUG',  # You can use DEBUG for development
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'filters': ['ignore_static'],
        },
    },
    'loggers': {
        # Generic logger for Django (includes standard behavior)
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        # Logger for queries - only errors are logged
        'django.request': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': False,
        },
        # Example for your application ('shop' is the name of the application)
        'shop': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',  # DEBUG can be enabled here for detailed tracking
            'propagate': True,
        },
    },
}
